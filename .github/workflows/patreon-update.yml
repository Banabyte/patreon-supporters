name: Patreon Supporters Sync

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:    # Allows manual triggering

permissions:
  contents: write       # Allow actions to push changes
  issues: write         # Allow actions to create issues

jobs:
  update_patreon_supporters:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Get Patreon Campaign ID
        run: |
          CAMPAIGN_RESPONSE=$(curl -s -X GET "https://www.patreon.com/api/oauth2/v2/identity?include=memberships.campaign" \
            -H "Authorization: Bearer ${{ secrets.PATREON_CREATOR_ACCESS_TOKEN }}")

          echo "Patreon Campaign Response: $CAMPAIGN_RESPONSE"

          CAMPAIGN_ID=$(echo "$CAMPAIGN_RESPONSE" | jq -r '.included[0].id')

          if [[ -z "$CAMPAIGN_ID" || "$CAMPAIGN_ID" == "null" ]]; then
            echo "❌ ERROR: Could not retrieve Campaign ID!"
            echo "Patreon API did not return a valid Campaign ID." > error_message.txt
            exit 1
          fi

          echo "✅ Found Patreon Campaign ID: $CAMPAIGN_ID"
          echo "CAMPAIGN_ID=${CAMPAIGN_ID}" >> $GITHUB_ENV

      - name: Refresh Patreon Token
        run: |
          REFRESH_RESPONSE=$(curl -s -X POST https://www.patreon.com/api/oauth2/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=refresh_token" \
            -d "refresh_token=${{ secrets.PATREON_CREATOR_REFRESH_TOKEN }}" \
            -d "client_id=${{ secrets.PATREON_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.PATREON_CLIENT_SECRET }}")

          echo "Patreon Token Response: $REFRESH_RESPONSE"

          NEW_ACCESS_TOKEN=$(echo "$REFRESH_RESPONSE" | jq -r '.access_token')

          if [[ -z "$NEW_ACCESS_TOKEN" || "$NEW_ACCESS_TOKEN" == "null" ]]; then
            echo "❌ ERROR: Could not retrieve new Access Token!"
            echo "Patreon API failed to return a new Access Token." > error_message.txt
            exit 1
          fi

          echo "✅ New Access Token obtained."
          echo "NEW_ACCESS_TOKEN=${NEW_ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Get Patreon Supporters
        run: |
          SUPPORTERS=$(curl -s -X GET "https://www.patreon.com/api/oauth2/v2/campaigns/${CAMPAIGN_ID}/members" \
            -H "Authorization: Bearer $NEW_ACCESS_TOKEN")

          echo "Patreon Supporters Response: $SUPPORTERS"

          if [[ -z "$SUPPORTERS" || "$SUPPORTERS" == "{}" || "$SUPPORTERS" == "[]" ]]; then
            echo "❌ ERROR: No supporters found or API call failed!"
            echo "Patreon API returned an empty supporter list." > error_message.txt
            exit 1
          fi

          mkdir -p docs
          echo "$SUPPORTERS" | jq '.' > docs/supporters.json
          echo "✅ Supporters list updated."

      - name: Commit Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs/supporters.json
          
          if ! git diff --quiet; then
            git commit -m "Updated Patreon supporters list"
            git push
          else
            echo "⚠️ No changes detected."
          fi

      - name: Create GitHub Issue on Failure
        if: failure()
        run: |
          ERROR_MSG=$(cat error_message.txt || echo "Unknown error occurred.")
          echo "## ⚠️ Patreon Sync Failed" > issue_body.md
          echo "" >> issue_body.md
          echo "**Error Message:**" >> issue_body.md
          echo "❌ $ERROR_MSG" >> issue_body.md
          echo "" >> issue_body.md
          echo "**Workflow Run:** [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> issue_body.md

          gh issue create --title "⚠️ Patreon Sync Failed" --body-file issue_body.md --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
