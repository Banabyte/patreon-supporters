name: Patreon Supporters Sync

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:    # Allows manual triggering

permissions:
  contents: write       # Allow actions to push changes
  actions: write        # Allow actions to update secrets
  issues: write         # Allow actions to create issues

jobs:
  update_patreon_supporters:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Banabyte‚Äôs Patreon Campaign ID
        run: |
          CAMPAIGN_ID="13334223"
          echo "‚úÖ Using hardcoded Campaign ID: $CAMPAIGN_ID"
          echo "CAMPAIGN_ID=${CAMPAIGN_ID}" >> $GITHUB_ENV

      - name: Refresh Patreon Token
        run: |
          echo "üîÑ Requesting new Patreon Access Token..."
          REFRESH_RESPONSE=$(curl -s -X POST https://www.patreon.com/api/oauth2/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=refresh_token" \
            -d "refresh_token=${{ secrets.PATREON_CREATOR_REFRESH_TOKEN }}" \
            -d "client_id=${{ secrets.PATREON_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.PATREON_CLIENT_SECRET }}")

          echo "Patreon Token Response: $REFRESH_RESPONSE"

          NEW_ACCESS_TOKEN=$(echo "$REFRESH_RESPONSE" | jq -r '.access_token')
          NEW_REFRESH_TOKEN=$(echo "$REFRESH_RESPONSE" | jq -r '.refresh_token')

          if [[ -z "$NEW_ACCESS_TOKEN" || "$NEW_ACCESS_TOKEN" == "null" ]]; then
            echo "‚ùå ERROR: Could not retrieve new Access Token!" | tee error_message.txt
            exit 1
          fi

          echo "‚úÖ New Access Token obtained."
          echo "NEW_ACCESS_TOKEN=${NEW_ACCESS_TOKEN}" >> $GITHUB_ENV
          echo "NEW_REFRESH_TOKEN=${NEW_REFRESH_TOKEN}" >> $GITHUB_ENV

      - name: Update GitHub Secret with New Refresh Token
        run: |
          echo "üîÑ Updating GitHub Secret with new refresh token..."
          curl -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/PATREON_CREATOR_REFRESH_TOKEN \
            -d "$(jq -n --arg value "$NEW_REFRESH_TOKEN" '{"encrypted_value":$value, "key_id":""}')"

          echo "‚úÖ Refresh token updated in GitHub Secrets."

      - name: Get Banabyte's Patreon Supporters
        run: |
          echo "üîÑ Fetching Banabyte's Patreon Supporters..."
          SUPPORTERS=$(curl -s -X GET "https://www.patreon.com/api/oauth2/v2/campaigns/${CAMPAIGN_ID}/members" \
            -H "Authorization: Bearer $NEW_ACCESS_TOKEN")

          echo "üîç Patreon Supporters Response:"
          echo "$SUPPORTERS" | jq '.' || echo "‚ùå ERROR: Failed to parse response."

          if [[ -z "$SUPPORTERS" || "$SUPPORTERS" == "{}" || "$SUPPORTERS" == "[]" ]]; then
            echo "‚ùå ERROR: No supporters found or API call failed!" | tee error_message.txt
            exit 1
          fi

          echo "‚úÖ Supporters list retrieved. Saving to file..."
          mkdir -p docs
          echo "$SUPPORTERS" | jq '.' > docs/supporters.json

          if [[ -f "docs/supporters.json" ]]; then
            echo "‚úÖ File successfully created: docs/supporters.json"
          else
            echo "‚ùå ERROR: File not created!" | tee error_message.txt
            exit 1
          fi

      - name: Commit Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs/supporters.json
          
          if ! git diff --quiet; then
            git commit -m "Updated Banabyte Patreon supporters list"
            git push
          else
            echo "‚ö†Ô∏è No changes detected."
          fi

      - name: Create GitHub Issue on Failure
        if: failure()
        run: |
          ERROR_MSG=$(cat error_message.txt || echo "Unknown error occurred.")
          echo "## ‚ö†Ô∏è Patreon Sync Failed" > issue_body.md
          echo "" >> issue_body.md
          echo "**Error Message:**" >> issue_body.md
          echo "‚ùå $ERROR_MSG" >> issue_body.md
          echo "" >> issue_body.md
          echo "**Workflow Run:** [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> issue_body.md

          gh issue create --title "‚ö†Ô∏è Patreon Sync Failed" --body-file issue_body.md --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
